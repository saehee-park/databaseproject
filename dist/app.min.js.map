{"version":3,"sources":["app.js"],"names":["createError","require","express","cookieParser","session","path","sequelize","indexRouter","flash","projectsRouter","evaluationRouter","pmEvaluationRouter","managementRouter","taskRouter","evalRouter","app","set","join","__dirname","peerEvaluationRouter","then","log","mypageRouter","console","error","err","use","logger","json","urlencoded","extended","secret","resave","saveUninitialized","cookie","maxAge","req","res","authorization","flashMessages","usersRouter","locals","currentUser","next","message","get","status","render","module","exports"],"mappings":"aACA,IAAIA,YAAcC,QAAQ,eAD1BC,QAAAD,QAAA,WACID,KAAAA,QAAcC,QAGdE,aAAeF,QAAQ,iBAFvBC,OAAOD,QAAU,UAIjBG,QAAUH,QAAQ,mBAHlBI,MAAOJ,QAAQ,0BAOGA,QAAQ,YAAtBK,mBAAAA,UAIJC,YAAcN,QAAQ,kBAPtBO,YAAQP,QAAQ,kBAShBQ,eAAiBR,QAAQ,qBACzBS,iBAAmBT,QAAQ,uBAC3BU,mBAR0BV,QAAD,0BAArBK,qBAAAA,QAS2B,4BAC/BM,iBAAmBX,QAAQ,uBAC3BY,WAAaZ,QAAQ,iBAPrBM,aAAcN,QAAQ,mBAStBa,WAAab,QAAQ,iBANrBS,IAAAA,UAcJK,IAAIC,IAAI,QAASX,KAAKY,KAAKC,UAAW,UAZtCH,IAAII,IAAAA,cAAAA,OACJb,UAAIM,KAAAA,CAAAA,OAAmBX,IAelBmB,KAAK,WAdNP,QAAUQ,IAAGpB,kBADjB,MAEIqB,SAAAA,GAiBIC,QAAQC,MAAMC,KAItBV,IAAAW,IAAAC,OAAA,QACAZ,IAAAW,IAAAxB,QAAA0B,QACAb,IAAAW,IAAAxB,QAAA2B,WAAA,CAAAC,UAAA,KACAf,IAAAW,IAAAvB,gBACAY,IAAAW,IAAAxB,QAAA,OAAAG,KAAAY,KAAAC,UAAA,YACAH,IAAAW,IAAAxB,QAAA,OAAAG,KAAAY,KAAAC,UAAA,WACAH,IAAAW,IAAAtB,QAAA,CACA2B,OAAA,eACAC,QAAA,EAEAC,mBAAA,EAWEC,OAAQ,CAAEC,OAAQ,UATpBpB,IAAIW,IAAIxB,SAGRa,IAAIW,IAAIxB,SAAOkC,EAAAC,EAAQhC,GACvBU,EAAIW,OAAIxB,YAAeG,EAAKY,QAAKC,KACjCH,EAAIW,OAAItB,cAAQgC,EAAAhC,QAAAkC,cACdP,EAAAA,OAAQQ,cADMH,EAAA5B,QAEdwB,MAkBFjB,IAAIW,IAAI,IAAKnB,aApBGQ,IAAhBW,IAAA,SAAAc,aAMAzB,IAAIW,IAAIlB,YAERC,gBACAM,IAAAW,IAAA,mBAAAP,sBAeAJ,IAAIW,IAAI,iBAAkBf,oBAb1BI,IAAIW,IAAI,cAAcW,kBACpBA,IAAAA,IAAII,cAAOC,kBACXL,IAAAA,IAAII,QAAOH,YACXD,IAAAA,IAAII,UAAOF,cACXI,IAAAA,IAAI,QAAA7B,YAMNC,IAAIW,IAAI,SAARU,EAAkBI,EAAAA,GAClBzB,EAAAf,YAAA,QAIAe,IAAIW,IAAI,SAAAD,EAARW,EAAuBxB,EAAAA,GAEvBG,EAAIW,OAAIkB,QAAWtB,EAAAA,QACnBP,EAAIW,OAAIF,MAGR,gBAHiBV,EAAAA,IAYY+B,IAT7B,OAAApB,EAAA,GAEEkB,EAAIG,OAAC9C,EAAAA,QAAL,KADFqC,EAIAU,OAAA,WAEEC,OAAAC,QAAAlC","file":"app.min.js","sourcesContent":["// Import module\nvar createError = require('http-errors');\nvar express = require('express');\nvar path = require('path');\nvar cookieParser = require('cookie-parser');\nvar logger = require('morgan');\nvar session = require('express-session');\nvar flash = require('connect-flash');\n\n//Import Model\nconst { sequelize } = require('./models');\n\n\n// Import Router\nvar indexRouter = require('./routes/index');\nvar usersRouter = require('./routes/users');\nvar projectsRouter = require('./routes/projects');\nvar evaluationRouter = require('./routes/evaluation');\nvar pmEvaluationRouter = require('./routes/pm_evaluation');\nvar peerEvaluationRouter = require('./routes/peer_evaluation');\nvar managementRouter = require('./routes/management');\nvar taskRouter = require('./routes/task');\nvar mypageRouter = require('./routes/mypage');\nvar evalRouter = require('./routes/eval');\n\n\n\n// Use express\nvar app = express();\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'pug');\n\nsequelize.sync({ force: false })\n    .then(() => {\n        console.log(\"데이터베이스 연결 성공\");\n    })\n    .catch((err) => {\n        console.error(err);\n    });\n\n// database connection\n// async function connectionTesting() {\n//   try {\n//     await sequelize.authenticate();\n//     console.log('Connection has been established successfully.');\n//   } catch (error) {\n//     console.error('Unable to connect to the database:', error);\n//   }\n// }\n// connectionTesting();\n\n// Use Middleware\napp.use(logger('dev'));\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\napp.use(express.static(path.join(__dirname, 'front')));\napp.use(session({\n  secret: 'keyboard cat',\n  resave: true,\n  saveUninitialized: true,\n  cookie: { maxAge: 24* 60 * 60 * 1000 } // 24 hours\n}));\napp.use(flash());\n\n// app.use(passport.initialize());\n// app.use(passport.session());\n\napp.use(function(req, res, next) {\n  res.locals.currentUser = req.session.user;\n  res.locals.authorization = req.session.authorization;\n  res.locals.flashMessages = req.flash();\n  next();\n});\n\n\n// Connection Router\napp.use('/', indexRouter);\napp.use('/users', usersRouter);\napp.use('/projects', projectsRouter);\napp.use('/peer_evaluation', peerEvaluationRouter);\napp.use('/pm_evaluation', pmEvaluationRouter);\napp.use('/evaluation', evaluationRouter);\napp.use('/management', managementRouter);\napp.use('/task', taskRouter);\napp.use('/mypage', mypageRouter);\napp.use('/eval', evalRouter);\n\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  next(createError(404));\n});\n\n// error handler\napp.use(function(err, req, res, next) {\n  // set locals, only providing error in development\n  res.locals.message = err.message;\n  res.locals.error = req.app.get('env') === 'development' ? err : {};\n\n  // render the error page\n  res.status(err.status || 500);\n  res.render('error');\n});\n\nmodule.exports = app;\n"]}