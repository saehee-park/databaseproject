{"version":3,"sources":["management.js"],"names":["express","require","router","Router","Participation","Project","Employee","res","next","render","catchErrors","req","regeneratorRuntime","async","_context","prev","stop","get","customers","_context2","awrap","Customer","findAll","sent","post","_context3","create","customer_name","body","name","flash","redirect","marketing","research","business","development","_context4","where","dept_no","_context5","project","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","employee","_context6","console","log","project_name","start_date","start","end_date","end","state","description","customer_id","customer","undefined","Symbol","iterator","done","value","emp_no","project_no","participation_date","t0","finish"],"mappings":"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","file":"management.min.js","sourcesContent":["var express = require(\"express\");\nvar router = express.Router();\nvar Employee = require(\"../models/employee\");\nvar Participation = require(\"../models/participation\");\nvar Customer = require(\"../models/customer\");\nvar Project = require(\"../models/project\");\nconst catchErrors = require(\"../lib/async-error\");\n\nrouter.get('/', function (req, res, next) {\n  res.render('management/index',{});\n});\n\nrouter.get('/customer/register', catchErrors(async (req, res, next) => {\n  res.render('management/registerCustomer', {});\n}));\n\nrouter.get('/customer/list', catchErrors(async (req, res, next) => {\n  const customers = await Customer.findAll();\n  res.render('management/customerList', {customers: customers});\n}));\n\nrouter.post('/customer/register', catchErrors(async (req, res, next) => {\n  const customer = await Customer.create({\n    customer_name: req.body.name\n  });\n  req.flash(\"success\", \"정상적으로 등록되었습니다.\");\n  res.redirect('/');\n}));\n\nrouter.get('/project/register', catchErrors(async (req, res, next) => {\n  const customers = await Customer.findAll();\n  const marketing = await Employee.findAll({ where: { dept_no: 1 } });\n  const research = await Employee.findAll({ where: { dept_no: 2 } });\n  const business = await Employee.findAll({ where: { dept_no: 3 } });\n  const development = await Employee.findAll({ where: { dept_no: 4 } });\n  res.render('management/registerProject', { \n    customers: customers, marketing: marketing, research: research, business: business, development: development });\n}));\n\nrouter.get('/project/search', catchErrors(async (req, res, next) => {\n  res.render('management/searchProject', {});\n}));\n\nrouter.post('/project/register', catchErrors(async (req, res, next) => {\n  //새로운 프로젝트를 생성하면서 동시에 participation 생성해야함.\n\n  console.log(req.body);\n\n  const project = await Project.create({\n    project_name: req.body.name,\n    start_date: req.body.start,\n    end_date: req.body.end,\n    state: req.body.state,\n    description: req.body.description,\n    customer_id: req.body.customer\n  });\n\n  for(let employee of req.body.employee) {\n    await Participation.create({\n      emp_no: employee,\n      project_no: project.project_no,\n      participation_date: project.start_date\n    });\n  }\n\n  req.flash('success', '정상적으로 등록되었습니다.');\n  res.render('project/list', {});\n}));\n\nmodule.exports = router;"]}