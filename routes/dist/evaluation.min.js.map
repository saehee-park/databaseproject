{"version":3,"sources":["evaluation.js"],"names":["express","require","router","Router","Project","Employee","Participation","PeerEvaluation","PMEvaluation","CustomerEvaluation","catchErrors","req","res","render","regeneratorRuntime","async","_context2","prev","next","stop","_context3","get","_context4","_context5","_context6","_context7","_context8","project_list","projects","i","_context9","awrap","findAll","sent","length","project_no","project_name","send","employee_list","participations","employee","_context10","where","params","findOne","emp_no","attributes","push","name","allEvaluationList","evaluationResult","_project","sum","peer_eval","_evaluation_score","j","pm_eval","evaluation_score2","customer_eval","evaluation_score3","_context11","project","non_evaluator_no","evaluation_score1","Math","round","_project2","_evaluation_score2","_context12","_project3","_evaluation_score3","_context13","_project4","_evaluation_score4","_context14","evaluation_result_list","pm_result","customer_result","_context15"],"mappings":"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","file":"evaluation.min.js","sourcesContent":["// 기본 모듈 Import\nvar express = require('express');\nvar router = express.Router();\nconst catchErrors = require(\"../lib/async-error\");\nconst { Project, Employee, Participation, PeerEvaluation, PMEvaluation, CustomerEvaluation} = require('../models');\n\n\nrouter.get('/peer', async (req, res, next) => {\n    res.render('evaluation/peer_evaluation');\n});\n\nrouter.get('/pm', async (req, res) => {\n    res.render('evaluation/pm_evaluation');\n});\n\nrouter.get('/customer', async (req, res) => {\n    res.render('evaluation/customer_evaluation');\n});\n\nrouter.get('/inputPm_evaluation', async (req, res) => {\n    res.render('evaluation/inputPm_evaluation.');\n});\n\nrouter.get('/inputCustomer_evaluation', async (req, res) => {\n    res.render('evaluation/inputCustomer_evaluation.');\n});\n\nrouter.get('/inquiry', async (req, res) => {\n    res.render('management/evaluationResult_inquiry');\n});\n\nrouter.get('/evaluate', async(req, res) => {\n    res.render('management/registerEvaluation');\n});\n\nrouter.get('/index', async(req, res) => {\n    res.render('evaluation/index');\n});\n\nrouter.get('/project_list', catchErrors(async (req, res) => {\n    // 빈 리스트\n    var project_list = [];\n\n    // 모든 프로젝트를 가져옴\n    const projects = await Project.findAll({\n        attributes: ['project_no', 'project_name']\n    });\n\n    // 모든 프로젝트의 정보를 담음 (project_no, project_name) 쌍으로\n    for(let i=0; i<projects.length; i++) {\n      project_list.push([projects[i].project_no, projects[i].project_name]);\n    }\n    \n    // 참여한 리스트 전달\n    res.send(project_list);\n}));\n\nrouter.get('/employee_list/:project_no', catchErrors(async (req, res) => {\n    // 빈 리스트\n    var employee_list = [];\n\n    // 해당 프로젝트에 대해 참여하고 있는 참여직원 튜플들을 가져옴\n    const participations = await Participation.findAll({\n        where: {\n            project_no: req.params.project_no\n        },\n    });\n\n    // 모든 프로젝트의 정보를 담음 (employee_no, employee_name) 쌍으로\n    for(let i=0; i<participations.length; i++) {\n        const employee = await Employee.findOne({\n            where: { emp_no: participations[i].emp_no },\n            attributes: ['name'],\n        });\n        employee_list.push([participations[i].emp_no, employee.name]);\n    }\n    \n    // 참여한 리스트 전달\n    res.send(employee_list);\n}));\n\n// 모든 프로젝트의 직원들에 대한 평가 리스트를 \nrouter.get('/result/all', catchErrors(async (req, res) => {\n    var allEvaluationList = [];\n    //모든 프로젝트에 참여자\n    const participations = await Participation.findAll({});\n\n    //각각의 프로젝트 참여자에 대한 list 생성\n    for(let i=0; i<participations.length; i++) {\n        let evaluationResult = [];\n\n        // 직원 이름 추가\n        const employee = await Employee.findOne({\n            where: {\n                emp_no: participations[i].emp_no\n            },\n        });\n        evaluationResult.push(employee.emp_no);\n        evaluationResult.push(employee.name);\n        \n    \n        // 프로젝트 이름 추가\n        const project = await Project.findOne({\n            where: {\n                project_no: participations[i].project_no\n            },\n        });\n        evaluationResult.push(project.project_name);\n\n        // 동료 평가 점수 추가\n        let sum = 0;\n        const peer_eval = await PeerEvaluation.findAll({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score1 = 0;\n        if(peer_eval.length != 0) {\n            for(let j=0; j<peer_eval.length; j++) {\n                if(peer_eval[j] != null)\n                    sum += (peer_eval[j].evaluation_score1 + peer_eval[j].evaluation_score2) / 2;\n            }\n            evaluation_score1 = Math.round(sum/peer_eval.length);\n            evaluationResult.push(evaluation_score1 + \"점\");\n        }\n\n        // PM 평가 점수 추가\n        const pm_eval = await PMEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n        let evaluation_score2 = 0;\n        if (pm_eval != null) {\n            evaluation_score2 = (pm_eval.evaluation_score1 + pm_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score2 + \"점\");\n        }\n\n        // 고객 평가 점수 추가\n        const customer_eval = await CustomerEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score3 = 0;\n        if (customer_eval != null) {\n            evaluation_score3 = (customer_eval.evaluation_score1 + customer_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score3 + \"점\");\n        }\n    \n        // 총합 점수 추가\n        evaluationResult.push(Math.round(evaluation_score1 + evaluation_score2 + evaluation_score3) + \"점\");\n\n        // 평균 추가\n        evaluationResult.push(Math.round((evaluation_score1 + evaluation_score2 + evaluation_score3)/3) + \"점\");\n\n        // 평가 정보 리스트 전달\n        if(evaluationResult.length == 8)\n            allEvaluationList.push(evaluationResult);\n    }\n\n    res.send(allEvaluationList);\n}));\n\n\n\n\nrouter.get('/result/empName', catchErrors(async (req, res) => {\n    var allEvaluationList = [];\n    //모든 프로젝트에 참여자\n    const participations = await Participation.findAll({});\n\n    //각각의 프로젝트 참여자에 대한 list 생성\n    for(let i=0; i<participations.length; i++) {\n        let evaluationResult = [];\n\n        // 직원 이름 추가\n        const employee = await Employee.findOne({\n            where: {\n                emp_no: participations[i].emp_no\n            },\n        });\n        evaluationResult.push(employee.name);\n    \n        // 프로젝트 이름 추가\n        const project = await Project.findOne({\n            where: {\n                project_no: participations[i].project_no\n            },\n        });\n        evaluationResult.push(project.project_name);\n\n        // 동료 평가 점수 추가\n        let sum = 0;\n        const peer_eval = await PeerEvaluation.findAll({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score1 = 0;\n        if(peer_eval.length != 0) {\n            for(let j=0; j<peer_eval.length; j++) {\n                if(peer_eval[j] != null)\n                    sum += (peer_eval[j].evaluation_score1 + peer_eval[j].evaluation_score2) / 2;\n            }\n            evaluation_score1 = Math.round(sum/peer_eval.length);\n            evaluationResult.push(evaluation_score1);\n        }\n\n        // PM 평가 점수 추가\n        const pm_eval = await PMEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n        let evaluation_score2 = 0;\n        if (pm_eval != null) {\n            evaluation_score2 = (pm_eval.evaluation_score1 + pm_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score2);\n        }\n\n        // 고객 평가 점수 추가\n        const customer_eval = await CustomerEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score3 = 0;\n        if (customer_eval != null) {\n            evaluation_score3 = (customer_eval.evaluation_score1 + customer_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score3);\n        }\n    \n        // 총합 점수 추가\n        evaluationResult.push(Math.round(evaluation_score1 + evaluation_score2 + evaluation_score3));\n\n        // 평균 추가\n        evaluationResult.push(Math.round((evaluation_score1 + evaluation_score2 + evaluation_score3)/3));\n\n        // 평가 정보 리스트 전달\n        if(evaluationResult.length == 7)\n            allEvaluationList.push(evaluationResult);\n    }\n\n    res.send(allEvaluationList);\n}));\n\nrouter.get('/result/empNum/:emp_no', catchErrors(async (req, res) => {\n    var allEvaluationList = [];\n    //모든 프로젝트에 참여자\n    const participations = await Participation.findAll({\n        where: {\n            emp_no: req.params.emp_no,\n        }\n    });\n\n    //각각의 프로젝트 참여자에 대한 list 생성\n    for(let i=0; i<participations.length; i++) {\n        let evaluationResult = [];\n\n        // 직원 이름 추가\n        const employee = await Employee.findOne({\n            where: {\n                emp_no: participations[i].emp_no\n            },\n        });\n        evaluationResult.push(employee.name);\n    \n        // 프로젝트 이름 추가\n        const project = await Project.findOne({\n            where: {\n                project_no: participations[i].project_no\n            },\n        });\n        evaluationResult.push(project.project_name);\n\n        // 동료 평가 점수 추가\n        let sum = 0;\n        const peer_eval = await PeerEvaluation.findAll({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score1 = 0;\n        if(peer_eval.length != 0) {\n            for(let j=0; j<peer_eval.length; j++) {\n                if(peer_eval[j] != null)\n                    sum += (peer_eval[j].evaluation_score1 + peer_eval[j].evaluation_score2) / 2;\n            }\n            evaluation_score1 = Math.round(sum/peer_eval.length);\n            evaluationResult.push(evaluation_score1);\n        }\n\n        // PM 평가 점수 추가\n        const pm_eval = await PMEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n        let evaluation_score2 = 0;\n        if (pm_eval != null) {\n            evaluation_score2 = (pm_eval.evaluation_score1 + pm_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score2);\n        }\n\n        // 고객 평가 점수 추가\n        const customer_eval = await CustomerEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score3 = 0;\n        if (customer_eval != null) {\n            evaluation_score3 = (customer_eval.evaluation_score1 + customer_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score3);\n        }\n    \n        // 총합 점수 추가\n        evaluationResult.push(Math.round(evaluation_score1 + evaluation_score2 + evaluation_score3));\n\n        // 평균 추가\n        evaluationResult.push(Math.round((evaluation_score1 + evaluation_score2 + evaluation_score3)/3));\n\n        // 평가 정보 리스트 전달\n        if(evaluationResult.length == 7)\n            allEvaluationList.push(evaluationResult);\n    }\n\n    res.send(allEvaluationList);\n}));\n\nrouter.get('/result/projectName', catchErrors(async (req, res) => {\n    var allEvaluationList = [];\n    //모든 프로젝트에 참여자\n    const participations = await Participation.findAll({});\n\n    //각각의 프로젝트 참여자에 대한 list 생성\n    for(let i=0; i<participations.length; i++) {\n        let evaluationResult = [];\n\n        // 직원 이름 추가\n        const employee = await Employee.findOne({\n            where: {\n                emp_no: participations[i].emp_no\n            },\n        });\n        evaluationResult.push(employee.name);\n    \n        // 프로젝트 이름 추가\n        const project = await Project.findOne({\n            where: {\n                project_no: participations[i].project_no\n            },\n        });\n        evaluationResult.push(project.project_name);\n\n        // 동료 평가 점수 추가\n        let sum = 0;\n        const peer_eval = await PeerEvaluation.findAll({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score1 = 0;\n        if(peer_eval.length != 0) {\n            for(let j=0; j<peer_eval.length; j++) {\n                if(peer_eval[j] != null)\n                    sum += (peer_eval[j].evaluation_score1 + peer_eval[j].evaluation_score2) / 2;\n            }\n            evaluation_score1 = Math.round(sum/peer_eval.length);\n            evaluationResult.push(evaluation_score1 + \"점\");\n        }\n\n        // PM 평가 점수 추가\n        const pm_eval = await PMEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n        let evaluation_score2 = 0;\n        if (pm_eval != null) {\n            evaluation_score2 = (pm_eval.evaluation_score1 + pm_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score2 + \"점\");\n        }\n\n        // 고객 평가 점수 추가\n        const customer_eval = await CustomerEvaluation.findOne({\n            where: {\n                non_evaluator_no: participations[i].emp_no,\n                project_no: participations[i].project_no,\n            }\n        });\n\n        let evaluation_score3 = 0;\n        if (customer_eval != null) {\n            evaluation_score3 = (customer_eval.evaluation_score1 + customer_eval.evaluation_score2)/2;\n            evaluationResult.push(evaluation_score3 + \"점\");\n        }\n    \n        // 총합 점수 추가\n        evaluationResult.push(Math.round(evaluation_score1 + evaluation_score2 + evaluation_score3) + \"점\");\n\n        // 평균 추가\n        evaluationResult.push(Math.round((evaluation_score1 + evaluation_score2 + evaluation_score3)/3) + \"점\");\n\n        // 평가 정보 리스트 전달\n        if(evaluationResult.length == 7)\n            allEvaluationList.push(evaluationResult);\n    }\n\n    res.send(allEvaluationList);\n}));\n\n// 특정 프로젝트의 특정 직원에 대한 평과 결과들에 대한 리스트 응답 \nrouter.get('/result/:emp_no/:project_no', catchErrors(async (req, res) => {\n    // 빈 리스트\n    var evaluation_result_list = [];\n\n    \n    evaluation_result_list.push(project.project_name);\n    // 동료 평가에 대한 평가 점수들의 평균을 푸쉬하기 위한 과정\n    const peer_result = await PeerEvaluation.findOne({\n        where: {\n            project_no: req.params.project_no,\n            non_evaluator_no: req.params.emp_no\n        },\n    });\n    \n    evaluation_result_list.push(evaluation_score1);\n    // PM 평가에 대한 평가 점수들의 평균을 푸쉬하기 위한 과정\n    const pm_result = await PMEvaluation.findOne({\n        where: {\n            project_no: req.params.project_no,\n            non_evaluator_no: req.params.emp_no\n        },\n    });\n    var evaluation_score2 = (pm_result.evaluation_score1 + pm_result.evaluation_score2)/2;\n    evaluation_result_list.push(evaluation_score2);\n    // 고객 평가에 대한 평가 점수들의 평균을 푸쉬하기 위한 과정\n    const customer_result = await CustomerEvaluation.findOne({\n        where: {\n            project_no: req.params.project_no,\n            non_evaluator_no: req.params.emp_no\n        },\n    });\n    var evaluation_score3 = (customer_result.evaluation_score1 + customer_result.evaluation_score2)/2;\n    evaluation_result_list.push(evaluation_score3);\n    \n    \n}));\n\nmodule.exports = router;"]}