{"version":3,"sources":["projects.js"],"names":["express","require","Participation","Project","Customer","Employee","EmpSkill","Task","catchErrors","rawAttributes","Router","router","req","res","projects","regeneratorRuntime","async","_context","prev","next","awrap","findAll","as","where","emp_no","session","user","sent","stop","findOne","params","project_no","model","project","project_emp","through","get","projectPercent","employeePercent","tasks","endTasks","empTasks","empEndTasks","_context3","current_state","include","console","render","String","Math","round","length","_context4","_context5","empList","empSkill","i","emp","set","_context6","skill_no","attributes","verifyTask","name","Set","send","_context7","_context8","_context9","module","exports"],"mappings":"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","file":"projects.min.js","sourcesContent":["var express = require('express');\nvar Participation = require('../models/participation');\nvar Project = require('../models/project');\nvar Customer = require('../models/customer');\nvar Employee = require('../models/employee');\nvar EmpSkill = require('../models/emp_skill');\nvar Task = require('../models/task');\n\nconst catchErrors = require('../lib/async-error');\nconst { rawAttributes } = require('../models/customer');\nvar router = express.Router();\n\nrouter.get('/', catchErrors(async (req, res, next) => {\n  const projects = await Project.findAll({\n    include: [\n      {    \n        model: Employee,\n        as: 'project_emp',\n        through: {\n          where: { emp_no: req.session.user.emp_no }\n        }\n      }\n    ]\n  });\n  res.render('project/list', { projects: projects });\n}));\n\nrouter.get('/:project_no', catchErrors(async (req, res, next) => {\n  const project = await Project.findOne({\n    where: { project_no: req.params.project_no },\n    include: [\n      {\n        model: Employee,\n        as: 'project_emp'\n      },\n      {\n        model: Customer\n      }\n    ]\n  });\n  console.log(project.project_emp[0]);\n  res.render('project/details', { project: project });\n}));\n\n// 업무 진척도 조회 페이지\nrouter.get('/tasks/:project_no/:emp_no', catchErrors(async (req, res) => {\n  var projectPercent = 0;\n  var employeePercent = 0;\n  var employee;\n\n  // 모든 태스크 가져오기\n  const tasks = await Task.findAll({\n      where: { project_no: req.params.project_no }\n  });\n\n  // 모든 end 태스크 가져오기\n  const endTasks = await Task.findAll({\n      where: {\n          project_no: req.params.project_no,\n          current_state: 'end',\n      }\n  });\n\n  // 직원의 모든 태스크 가져오기\n  const empTasks = await Task.findAll({\n    where: {\n        project_no: req.params.project_no,\n        emp_no: req.params.emp_no,            \n    }\n  });\n\n  // 직원의 모든 end 태스크 가져오기\n  const empEndTasks = await Task.findAll({\n      where: {\n          project_no: req.params.project_no,\n          emp_no: req.params.emp_no,\n          current_state: 'end',\n      }\n  });\n\n  // 사용자의 verify 태스크 개수 추가\n  const verifyTask = await Task.findAll({\n      where: {\n          project_no: req.params.project_no,\n          emp_no: req.params.emp_no,\n          current_state: 'verify',\n      }\n  });\n\n  // 사용자의 progress 태스크 개수 추가\n  const progressTask = await Task.findAll({\n      where: {\n          project_no: req.params.project_no,\n          emp_no: req.params.emp_no,\n          current_state: 'progress',\n      }\n  });\n\n  // 사용자의 uncheck 태스크 개수 추가\n  const uncheckTask = await Task.findAll({\n      where: {\n          project_no: req.params.project_no,\n          emp_no: req.params.emp_no,\n          current_state: 'uncheck',\n      }\n  });\n\n  projectPercent = String(Math.round(endTasks.length / tasks.length * 100));\n  employeePercent = String(Math.round(empEndTasks.length / empTasks.length * 100));\n\n  // employeeTaskList.push(Math.round(endTasks.length / tasks.length * 100));\n  // employeeTaskList.push(endTasks.length);\n  // employeeTaskList.push(verifyTask.length);\n  // employeeTaskList.push(progressTask.length);\n  // employeeTaskList.push(uncheckTask.length);\n\n  res.render('project/checkTask', { projectPercent, employeePercent });\n}));\n\n// addTask 페이지 응답 \nrouter.get('/addTask', catchErrors(async (req, res) => {\n  res.render('/project/addTask', {});\n}));\n\n// 업무를 DB에 추가\nrouter.post('/addTask', catchErrors(async (req, res) => {\n  const task = await Task.create({\n    \n  });\n}));\n\n// 스킬셋이 HTML & JAVASCRIPT인 직원 리스트 응답\nrouter.get('/addTask/HJ', catchErrors(async (req, res) => {\n  // 직원 리스트 선언\n  let empList = [];\n\n  // EmpSkill 가져오기\n  const empSkill = await EmpSkill.findAll({\n    where: {\n      skill_no: [1, 2],\n    }\n  });\n  \n  // 해당 스킬셋을 가진 직원들에 대해 모든 이름 값을 가져오기 위한 반복문\n  for (let i=0; i<empSkill.length; i++) {\n    // Employee 가져오기\n    const emp = await Employee.findOne({\n      where: {\n        emp_no: empSkill[i].emp_no,\n      },\n      attributes: ['name'],\n    });\n\n    // 모든 직원 추가\n    empList.push([empSkill[i].emp_no, emp.name]);\n  }\n  // 중복 제거\n  const set = new Set(empList);\n  console.log(set);\n  empList = [...set];\n  console.log(empList[1][0] == empList[3][0]);\n  // 최종 리스트 전달\n  res.send(empList);\n}));\n\n// 스킬셋이 C# & C/C++인 직원 리스트 응답\nrouter.get('addTask/CCC', catchErrors(async (req, res) => {\n  const empSkill = await EmpSkill.findAll({\n    where: {\n      skill_no: [3, 4],\n    }\n  });\n}));\n\n// 스킬셋이 Dart/Flutter & Java 인 직원 리스트 응답\nrouter.get('addTask/DFJ', catchErrors(async (req, res) => {\n  const empSkill = await EmpSkill.findAll({\n    where: {\n      skill_no: [5, 6],\n    }\n  });\n}));\n\n// 스킬셋이 Dart/Flutter & Java 인 직원 리스트 응답\nrouter.get('addTask/Python', catchErrors(async (req, res) => {\n  const empSkill = await EmpSkill.findAll({\n    where: {\n      skill_no: 7,\n    }\n  });\n}));\n\nmodule.exports = router;\n"]}